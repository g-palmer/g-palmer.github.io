<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jQuery | Mega Awesome Blog 'n Stuff]]></title>
  <link href="http://gpalmer.me/blog/categories/jquery/atom.xml" rel="self"/>
  <link href="http://gpalmer.me/"/>
  <updated>2013-07-11T17:56:43-07:00</updated>
  <id>http://gpalmer.me/</id>
  <author>
    <name><![CDATA[Greg Palmer]]></name>
    <email><![CDATA[gpalmer323@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Who needs jQuery?]]></title>
    <link href="http://gpalmer.me/blog/2013/07/02/who-needs-jquery/"/>
    <updated>2013-07-02T20:55:00-07:00</updated>
    <id>http://gpalmer.me/blog/2013/07/02/who-needs-jquery</id>
    <content type="html"><![CDATA[<p><strong><em>THIS POST IS VERY MUCH STILL A WORK IN PROGRESS</em></strong></p>

<p>When first learning Javascript, aside from simple syntax and some for loops, typically a new developer will jump right into jQuery. This is largely a testament to the simplicity and power of the library as it allows someone with limited programming experience to start doing some pretty nifty things in the browser. jQuery doesn&rsquo;t even shy away from this fact: &lsquo;Write less, Do More&rsquo;. But as overused quotes from that one movie go, <em>&ldquo;With great power, comes great responsibility.&rdquo;</em></p>

<p><img class="center <a" src="href="http://ejohn.org/apps/workshop/adv-talk/jquery_logo.png">http://ejohn.org/apps/workshop/adv-talk/jquery_logo.png</a>" title="&lsquo;jQuery&rsquo;" ></p>

<p>The difference between a beginning developer and an intermediate to advanced developer is their ability to understand where all of this &lsquo;magic&rsquo; is coming from. So what better way to spend the next few minutes than checking out some of the native DOM methods that jQuery is replacing. And in doing so, we can come to better appreciate the library and maybe even speed up some of our sites<sup>1</sup>.</p>

<h3>Selectors</h3>

<p>We&rsquo;ll begin with the easy stuff. One of the first things people do with jQuery is learn how to select elements(nodes) from the DOM.</p>

<p>In jQuery you simply use a CSS style selector to grab an element of list of elements:</p>

<p><code>javascript
$('div') // returns a list of all matching '&lt;div&gt;' elements
$('#xyz') // returns the matching element with id="xyz"
$('.black') // returns a list of all matching elements with class="black"
</code></p>

<p>But natively we can still do the same thing with:</p>

<p><code>javascript
document.getElementsByTagName('div')
document.getElementById('xyz')
document.getElementsByClassName('black')
</code></p>

<p>We also can use methods that works more similar to jQuery:</p>

<p><code>javascript
document.querySelector([some CSS style selector string]) // returns first matched element
document.querySelectorAll([some CSS style selector string]) // returns list of matched element
</code></p>

<p>Because these methods also work on elements, we can chain them together to find all the <code>&lt;div&gt;</code> elements with <code>class="black"</code> that are children of the element with <code>id="xyz"</code>.</p>

<p><code>javascript
document.getElementById('xyz').getElementsByTagName('div').getElementsByClassName('black')
</code></p>

<h3>Create and append new elements</h3>

<p>As you know, jQuery also allows us to dynamically create new elements(nodes) and then subsequently add them to the DOM.</p>

<p>In jQuery you just write a string of some valid HTML:</p>

<p><code>javascript
var $div = $('&lt;div class="black"&gt;&lt;p&gt;Hello World&lt;/p&gt;&lt;/div&gt;'); // creates a new div element with class="black" and some paragraph text
var $img = $('&lt;img src="picture.jpg" alt="My Picture"&gt;'); // creates a new img element with a src and alt text
</code></p>

<p>Natively we can still do the same thing:</p>

<p>```javascript
var div = document.createElement(&lsquo;div&rsquo;); // create new div element
div.className = &lsquo;black&rsquo;; // give it a class name of &lsquo;black&rsquo;
var paragraph = document.createElement(&lsquo;p&rsquo;); // create new p element
var text = document.createTextNode(&lsquo;Hello World&rsquo;); // create a new text node
paragraph.appendChild(text); // add text node to the new div
div.appendChild(paragraph)</p>

<p>var img = document.createElement(&lsquo;img&rsquo;); // create a new img element
img.src = &lsquo;picture.jpg&rsquo;; // set it&rsquo;s src using direct property manipulation
img.setAttribute(&lsquo;alt&rsquo;, &lsquo;My Picture&rsquo;); // set it&rsquo;s alt using setAttribute method (similar to using img.alt)
<code>``
What I think is cool, and simplifies thinking about things a bit, is we can directly update properties on a node since it is basically just an object. An example of this is setting the</code>src<code>of the img by simply setting this property of the</code>img` node.</p>

<p>This works for just about everything from setting styles (CSS) to classes, ids and any data. Basically log a DOM node to the Chrome console and you can see all of the properties that are accessible.</p>

<p>Typically the next step would be to add these elements to the DOM</p>

<p>```javascript
$(&lsquo;body&rsquo;).append($div) // jQuery select body element and append the new div</p>

<p>document.querySelector(&lsquo;body&rsquo;).appendChild(div) // native select body, then append div
```</p>

<p>There&rsquo;s actually some other ways that we can create elements and add them to the DOM using document and element methods such as <code>createDocumentFragment</code>, <code>innerHTML</code>, and <code>textContent</code>.</p>

<h3>Ajax</h3>

<p>Now for some of the more fun stuff. jQuery makes sending ajax requests incredibly simple:</p>

<p><code>javascript
$.ajax([options])
</code>
Where options is an object containing things like the URL, ajax method, headers, data to send and callback functions.</p>

<p>Natively, things are a bit different, and can easily get complex. A lot of what makes jQuery ajax so nice is it abstracts away a lot of this complexity. To keep things simple, let&rsquo;s just say we want to make a &lsquo;GET&rsquo; request to a RESTful API and we expect to recieve some JSON data back, which we&rsquo;ll log to the console.</p>

<p>We have to create a new instance of the <code>XMLHttpRequest</code> class<sup>2</sup> to get things started.</p>

<p><code>javascript
var request = new XMLHttpRequest();
</code></p>

<p>From there, we&rsquo;ll need to setup the request and make things happen.</p>

<p><code>javascript
request.
</code></p>

<blockquote><p>1 By using native DOM APIs, we don&rsquo;t need to load jQuery (or can conditionally load jQuery if the browser doesn&rsquo;t support native DOM APIs). In addition, many performance tests have shown that using the native methods is quite a bit faster than jQuery. The tradeoff is that jQuery can also perform the methods on older browsers where native DOM APIs aren&rsquo;t supported &mdash; making things easier overall.
2 Read more about the <code>XMLHttpRequest</code> class on <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">MDN</a>. There&rsquo;s a bunch more it can do than just handle XML data and HTTP requests.</p></blockquote>
]]></content>
  </entry>
  
</feed>
